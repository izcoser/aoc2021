

# This file was *autogenerated* from the file 15.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
import sys

m = []

def inMatrix(i, j):
    return i >= _sage_const_0  and i < len(m) and j >= _sage_const_0  and j < len(m[_sage_const_0 ])

g = DiGraph(weighted=True)

for line in sys.stdin:
    m.append([int(i) for i in line.strip()])

for i in range(len(m)):
    for j in range(len(m[_sage_const_0 ])):
        neighbors = [(i - _sage_const_1 , j), (i + _sage_const_1 , j), (i, j + _sage_const_1 ), (i, j - _sage_const_1 )]
        for k in neighbors:
            if inMatrix(k[_sage_const_0 ], k[_sage_const_1 ]):
                g.add_edge(((i, j), k), label=m[ k[_sage_const_0 ] ][ k[_sage_const_1 ] ])

start = (_sage_const_0 , _sage_const_0 )
end = (len(m) - _sage_const_1 , len(m[_sage_const_0 ]) - _sage_const_1 )
print(g.shortest_path_length(start, end, by_weight=True))

